apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'java'

buildscript {
    repositories {
        maven { url "http://jcenter.bintray.com/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "http://m2.neo4j.org/content/repositories/releases/" }
        maven { url "http://mvnrepository.com" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
        ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
    }

    module {
        downloadSources = true
    }
}

configurations {
    runtimeOnly
}

dependencies {

    // to run FindMe on Heroku
    runtimeOnly "com.github.jsimone:webapp-runner:7.0.22"
    // monitoring on Heroku
    runtimeOnly "com.newrelic.agent.java:newrelic-agent:2.18.0"

    // start Embedded Tomcat dependencies
    def tomcatVersion = '7.0.50'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    // end Embedded Tomcat dependencies

    //compile "org.neo4j:neo4j-rest-graphdb:1.9"
    //compile "org.neo4j:neo4j-kernel:1.9.8"

    // MySQL JDBC connector
    compile 'mysql:mysql-connector-java:5.1.35'

    compile "org.freemarker:freemarker:2.3.20"

    compile "org.glassfish.jersey.core:jersey-server:2.5.1"
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.5.1'
    compile 'org.glassfish.jersey.ext:jersey-mvc:2.5.1'

    compile 'org.apache.commons:commons-io:1.3.2'

    // begin Hibernate Validator dependencies
    compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
    compile 'org.hibernate:hibernate-validator-annotation-processor:5.0.3.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'org.glassfish.web:javax.el:2.2.4'
    compile "org.testng:testng:6.9.4"
    // end Hibernate Validator dependencies

    compile 'net.glxn.qrgen:javase:2.0'

    def slf4jVersion = "1.7.4"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
//    compile "ch.qos.logback:logback-core:1.0.12"
//    compile "ch.qos.logback:logback-classic:1.0.12"

    testCompile "junit:junit:4.11"
    testCompile "org.hamcrest:hamcrest-all:1.1"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.testng:testng:6.9.4"

    testCompile "org.neo4j:neo4j-kernel:1.9.8:tests"
    testCompile "org.neo4j.app:neo4j-server:1.9.8"
    testCompile "org.neo4j.app:neo4j-server:1.9.8:static-web"
}

tomcatRunWar {
    httpPort = 9000
}

task ('tomcatDaemonRunWar', type: org.gradle.api.plugins.tomcat.TomcatRunWar, description: 'Only used as part of the task integration') {
    httpPort = 9001
    daemon = true
    // tasks[':functional-tests:integration'].execute()
}

task ('testng', type: Test, description: 'Runs TestNG tests.') {

}

test {
    useTestNG {
        suites 'src/main/resources/testng.xml'
    }

    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

war {
    archiveName = "FindMe.war"
    from 'public'
}

//task('checkDatabase', type:Exec) {
//    ignoreExitValue = true
//
//    //on windows:
//    commandLine 'cmd', '/c', 'neo4j', 'status'
//
//    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method checkDatabase.output() can be used to obtain the output:
//    ext.output = {
//        return (standardOutput.toString() + "***")
//    }
//
//    //check the output
//    if (standardOutput.toString().contains("RUNNING")) {
//        println "pass"
//    } else {
//        println "fail"
//    }
//}

//task print (dependsOn: ['checkDatabase']) {
//    println ("***" + standardOutput.toString() + "***")
//}

//task('hello', dependsOn: ['checkDatabase']) << {
//    //println "hello"
//    println tasks.checkDatabase.output
//}


// WEBAPP_RUNNER HEROKU STUFF

task copyToLib << {
    copy {
        from configurations.runtimeOnly.copy().setTransitive(false)
        into "$buildDir/libs"
        rename { name ->
            def artifacts = configurations.runtimeOnly.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.name}.${artifact.extension}"
        }
    }
}

task ('findmeDeploy', type: Exec, dependsOn:['war', 'copyToLib'], ) {
    commandLine 'java' //-jar webapp-runner-7.0.22.jar --port 9000 ./build/libs/FindMe.war'
    args = ['-jar', 'build/libs/webapp-runner.jar', '--port', '9000', 'build/libs/FindMe.war']
}

task ('buildWar', type: Exec, dependsOn:['war', 'copyToLib'], ) {
    commandLine 'jar'
    args = ['-cvf', 'FindMe.war', 'build/libs/FindMe.war']
}

task ('stage', dependsOn: ['clean', 'war', 'copyToLib']) << {
    println "Running stage"
}
